[gcode_macro SEARCH]
description: Usage: SEARCH [I=<include>] [E=<exclude>]
variable_color_path:       "rgb(128,128,128)"
variable_color_key:        "rgb(0,150,255)"
variable_color_val:        "rgb(255,200,50)"
variable_color_typ:        "rgb(180,180,180)"
variable_color_match:      "rgb(255,0,100)"
variable_color_category:   "rgb(50,205,50)"
variable_color_box_bg:     "rgb(20,20,20)"
variable_color_box_border: "rgb(40,40,40)"
variable_font_size:        "0.9em"
variable_max_depth:        5
variable_search_sep:       "°"
variable_long_limit:       100
variable_timeout:          10.0   # timeout after which to exit early.
gcode:
    ; ======================= STYLES & HELPER JINJA MACROS ==========================
    {%- set base_style = "style='font-size:" ~ font_size ~ "; margin-bottom:3px;'" -%}
    {%- set box_style = "style='font-size:" ~ font_size ~ "; background-color:" ~ color_box_bg ~ "; border:1px solid " ~ color_box_border ~ "; border-radius:4px; padding:2px; margin-top:2px;'" -%}
    {%- set raw_search = params.I|default("") -%}
    {%- set raw_search = params.S if S in params and not raw_search else raw_search -%}
    {%- set sections = {'gcode_commands': [], 'user_macros': [], 'config_templates': [], 'config_settings': [], 'other': [], 'display_templates':[]} -%}
    {%- set ns = namespace(queue=[], results=[]) -%}
    {%- set output = [] -%}
    
    {%- set include_terms = raw_search.lower().split(search_sep) -%}
    {%- set exclude_str = params.E|default("") -%}
    {%- set exclude_terms = (exclude_str|lower).split(search_sep) -%}
    {%- set depth_limit = params.MAX_DEPTH|default(max_depth)|int -%}
    
    {%- for k in printer -%}
        {%- set _ = ns.queue.append({'path': k, 'obj': printer[k], 'depth': 1}) -%}
    {%- endfor -%}

    #---< html escaping, html shorts
    {%- macro _escp(any) -%}{any|string|e|replace('\r', '')|replace('\n', '<br>')}{%- endmacro -%}
    {%- macro _span(color, txt) -%}{"<span style='color:" ~ color ~ "'>" ~ txt ~ "</span>"}{%- endmacro -%}
    {%- macro _summary(summary, details) -%}{"<details " ~ base_style ~ "><summary>" ~ summary ~ "</summary>" ~ details ~ "</details>"}{%- endmacro -%}

    #---< highlight resutls
    {%- macro _highlight_text(text, terms, color) -%}
        {%- set ns = namespace(output=text|string) -%}
        {%- for term in terms if term and term in ns.output|lower -%}
            {%- set idx = (ns.output|lower).find(term) -%}
            {%- if idx != -1 -%}
                {%- set ns.output = ns.output[:idx] ~ _span(color, ns.output[idx:idx + term|length]) ~ ns.output[idx + term|length:] -%}
            {%- endif -%}
        {%- endfor -%}
        {ns.output}
    {%- endmacro -%}


    #---< helper: creates a compact summary of a list if it contains simple items
    {%- macro _summarize_sequence(seq) -%}
        {%- set ns = namespace(summary='[', is_simple=True) -%}
        {%- for item in seq -%}
            {%- if item is mapping or (item is sequence and item is not string) -%}
                {%- set ns.is_simple = False -%}
            {%- endif -%}
        {%- endfor -%}
        {%- if ns.is_simple -%}
            {%- for item in seq -%}
                {%- set ns.summary = ns.summary ~ _escp(item) ~ ', ' -%}
            {%- endfor -%}
            {%- if ns.summary|length > 2 -%}{%- set ns.summary = ns.summary[:-2] -%}{%- endif -%}
            {%- set ns.summary = ns.summary ~ ']' -%}
            {%- if ns.summary|length > long_limit|int -%}{%- set ns.summary = ns.summary[:long_limit|int] ~ '...]' -%}{%- endif -%}
            {ns.summary}
        {%- endif -%}
    {%- endmacro -%}

    #---< helper: build one <div> line for a child entry
    {%- macro _append_child(list_ref, key, value) -%}
        {%- if value is not none and not (value is sameas printer) -%}
            {%- set key_html  = _span(color_key, key) -%}
            
            {%- set line = namespace(html='') -%}

            {%- if key == 'gcode' and value is string and value|trim -%}
                {%- set gcode_item = {'path': key, 'obj': value} -%}
                {%- set line.html = _render_gcode(gcode_item) -%}

            {%- elif value is mapping -%}
                {%- set type_html = _span(color_typ, "(" ~ value.__class__.__name__ ~ ")") -%}
                {%- set line.html = "<div>" ~ key_html ~ ": " ~ type_html ~ "</div>" -%}

            {%- elif value is sequence and value is not string -%}
                {%- set summary_text = _summarize_sequence(value) | trim -%}
                {%- set val_html = "" -%}
                {%- if summary_text -%}
                    {%- set val_html = _span(color_val, _highlight_text(summary_text, include_terms, color_match)) -%}
                {%- endif -%}
                {%- set type_html = _span(color_typ, "(list)") -%}
                {%- set line.html = "<div>" ~ key_html ~ ": " ~ val_html ~ " " ~ type_html ~ "</div>" -%}
                
            {%- else -%}
                {%- set val_html = _highlight_text(_escp(value), include_terms, color_match) -%}
                {%- set type_html = _span(color_typ, "(" ~ value.__class__.__name__ ~ ")") -%}
                {%- set line.html = "<div>" ~ key_html ~ ": " ~ _span(color_val, val_html) ~ " " ~ type_html ~ "</div>" -%}
            {%- endif -%}

            {%- if line.html -%}
                {%- set _ = list_ref.append(line.html) -%}
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    #---< categorization for section sorting/gcode formatting
    {%- macro _get_category(item) -%}
        {%- if item.path.startswith('gcode_macro') -%}
            { 'user_macros' }
        {%- elif item.path.startswith('gcode.commands') -%}
            { 'gcode_commands' }
        {%- elif (item.obj is string and ('{%' in item.obj or '{' in item.obj)) or item.path.startswith('configfile.settings.delayed_gcode') or (item.path.startswith('configfile.settings.') and item.path.endswith('_gcode')) -%}
            { 'config_templates' }
        {%- elif item.path.startswith('configfile.settings.display_template') -%}
            { 'display_templates' }
        {%- elif item.path.startswith('configfile.settings') -%}
            { 'config_settings' }
        {%- else -%}
            { 'other' }
        {%- endif -%}
    {%- endmacro -%}
    #-------------------------------------- RENDERS --------------------------------------
    #---< gcode render
    {%- macro _render_gcode(item) -%}
        {%- set indent_keywords = ['{%if', '{%for', '{%el', '{%macro'] -%}
        {%- set outdent_keywords = ['{%end', '{%el'] -%}
        {%- set ns_format = namespace(lines=[], indent=0, in_multiline=False) -%}

        {%- for line in item.obj.split('\n') -%}
            {%- set stripped = line|trim -%}
            {%- if stripped -%}
                {%- set normalized_line = stripped|replace(' ', '')|replace('-', '') -%}
                {%- set has_indent_keyword = (indent_keywords|select('in', normalized_line)|list|length) > 0 -%}
                {%- set has_outdent_keyword = (outdent_keywords|select('in', normalized_line)|list|length) > 0 -%}

                {%- if ns_format.in_multiline and '%}' in stripped -%}
                    {%- set ns_format.in_multiline = False -%}
                {%- endif -%}

                {%- if has_outdent_keyword -%}
                    {%- set ns_format.indent = [ns_format.indent - 1, 0]|max -%}
                {%- endif -%}

                {%- set total_indent = ns_format.indent + (1 if ns_format.in_multiline else 0) -%}
                {%- set _ = ns_format.lines.append('  ' * 2 * total_indent ~ line|e) -%}

                {%- if has_indent_keyword and not has_outdent_keyword or normalized_line.startswith('{%else') -%}
                    {%- set ns_format.indent = ns_format.indent + 1 -%}
                {%- endif -%}
                
                {%- if not ns_format.in_multiline and stripped.startswith('{%') and not '%}' in stripped -%}
                    {%- set ns_format.in_multiline = True -%}
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
        {%- set gcode = _highlight_text(ns_format.lines|join('<br>'), include_terms, color_match) -%}
        {%- set details = "<div " ~ box_style ~ "><div style='white-space:pre; font-family:monospace; overflow-x:auto;'>" ~ gcode ~ "</div></div>" -%}
        {_summary(_highlight_text(item.path, include_terms, color_match), details)}
    {%- endmacro -%}

    #---< description/misc render
    {%- macro _render_long_string(item) -%}
        {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
        {%- set h_val  = _highlight_text(_escp(item.obj), include_terms, color_match) -%}
        {_summary(h_path, "<div " ~ box_style ~ ">" ~ h_val ~ "</div>")}
    {%- endmacro -%}

    #---< simple value (int, none, float etc...) render
    {%- macro _render_primitive(item) -%}
        {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
        {%- set safe_val_str = _escp(item.obj) -%}
        {%- set val = _highlight_text(safe_val_str, include_terms, color_match) -%}
        {%- set h_type = _highlight_text("(" ~ item.obj.__class__.__name__ ~ ")", include_terms, color_typ) -%}
        { "<div " ~ base_style ~ ">" ~ h_path ~ ": " ~ _span(color_val, val) ~ " " ~ _span(color_typ, h_type) ~ "</div>" }
    {%- endmacro -%}
    

    #---< render for mappings AND lists
    {%- macro _render_mapping(item) -%}
        {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
        {%- set children = [] -%}

        #---< iterate over mapping items for dict-like objects
        {%- if item.obj is mapping -%}
            {%- for key, value in item.obj.items()|sort(attribute=0) -%}
                {%- set _ = _append_child(children, key, value) -%}
            {%- endfor -%}
        #---< [NEW] iterate over sequence items for list/tuple objects
        {%- elif item.obj is sequence and item.obj is not string -%}
             {%- for i in range(item.obj|length) -%}
                {%- set value = item.obj[i] -%}
                {%- set _ = _append_child(children, '[' ~ i ~ ']', value) -%}
            {%- endfor -%}
        #---< fall back to dir() for other complex python/klipper objects
        {%- else -%}
            {%- for key in item.obj.__dir__()|sort -%}
                {%- if not key.startswith('__') -%}
                    {%- set value = item.obj|attr(key) -%}
                    {%- set _ = _append_child(children, key, value) -%}
                {%- endif -%}
            {%- endfor -%}
        {%- endif -%}

        #---< wrap the collected children in a collapsible details tag
        {%- set summary = h_path ~ " " ~ _span(color_typ, "(" ~ item.obj.__class__.__name__ ~ ")") -%}
        {%- set details = "<div " ~ box_style ~ ">" ~ (children|join) ~ "</div>" -%}
        {_summary(summary, details)}
    {%- endmacro -%}

    {%- macro _render_result(item) -%}
        {%- set cls = item.obj.__class__.__name__ -%}
        #---< Check category first for reliable G-Code formatting
        {%- if item.category == 'config_templates' -%}
            {_render_gcode(item)}
            
        #---< raw gcode text? >
        {%- elif cls == 'str' and ('{%' in item.obj) -%}
            {_render_gcode(item)}

        #---< any dict-like OR non-trivial object gets a field table >
        {%- elif item.obj is mapping or cls == 'tuple' or cls not in ['str', 'int', 'float', 'bool', 'NoneType'] -%}
            {_render_mapping(item)}

        #---< long plain strings collapse to <details> >
        {%- elif cls == 'str' and item.obj|length > long_limit|int -%}
            {_render_long_string(item)}

        #---< simple primitives (numbers, short strings, etc.) >
        {%- else -%}
            {_render_primitive(item)}
        {%- endif -%}
    {%- endmacro -%}


    #---------------------------- ACTUAL SERACH --------------------------   
    {%- if not raw_search -%}
        {action_raise_error("Usage: SEARCH [I=<include>] [E=<exclude>]")}
    {%- endif -%}
    {% set reactor = printer.printer.reactor %}
    { action_respond_info("Starting search for '" ~ raw_search|e ~ "'...") }
    {%- set start_time = reactor.monotonic()|float -%}

    {%- for i in range(40000) if ns.queue -%}
        {%- if i % 5000 == 0 and reactor.monotonic()|float - start_time > timeout|float -%}
            {%- set _ = output.append('<br>' ~ _span('red', "Search aborted after " ~ (reactor.monotonic() - start_time) ~ " s with " ~ ns.queue|length ~ " remaining in the que")) -%}
            {%- set _ = ns.queue.clear() -%}
        {%- elif ns.results|length > 249 -%}
            {%- set _ = output.append('<br>' ~ _span('red', "Search aborted after " ~ (reactor.monotonic() - start_time) ~ " s (capped at 250 results, please specifcy)")) -%}
            {%- set _ = ns.queue.clear() -%}
        {%- else -%}
            {%- set item = ns.queue.pop(0) -%}
            {%- set val_str = item.obj|string if not (item.obj is mapping) else "" -%}
            {%- set combined = (item.path ~ " " ~ val_str)|lower -%}
            {%- set keep = namespace(v=True) -%}
            
            {%- for term in include_terms if term and term not in combined -%}{%- set keep.v = False -%}{%- endfor -%}
            {%- for term in exclude_terms if term and term     in combined -%}{%- set keep.v = False -%}{%- endfor -%}
            {%- if 'configfile.config' in item.path -%}{%- set keep.v = False -%}{%- endif -%} #---< duplicate but all values are strings lol
            
            {%- if keep.v -%}
                {%- set _ = ns.results.append({'path': item.path, 'html': _render_result(item), 'category': _get_category(item)}) -%}
            #---< dont keep? keep searching into it.
            {%- elif item.depth < depth_limit -%}
                {%- if item.obj is mapping -%} #---< mapping
                    {%- for k in item.obj -%}{%- set _ = ns.queue.append({'path': item.path ~ "." ~ k, 'obj': item.obj[k], 'depth': item.depth + 1}) -%}{%- endfor -%}
                {%- elif item.obj is sequence and item.obj is not string -%} #---< or list?
                    {%- for i in range(item.obj|length) -%}{%- set _ = ns.queue.append({'path': item.path ~ "[" ~ i ~ "]", 'obj': item.obj[i], 'depth': item.depth + 1}) -%}{%- endfor -%}
                {%- endif -%}
            {%- endif -%}
        {%- endif -%}
    {%- endfor -%}
    #---------------------------- DISPLAY SEARCH --------------------------  
    {%- if not ns.results -%}
        RESPOND MSG="No matches found for '{raw_search|e}'"
    {%- else -%}
        {%- for item in ns.results|sort(attribute='path') -%}
            {%- set _ = sections[item.category].append(item.html) -%}
        {%- endfor -%}      
        {%- set category_map = [
            ('live printer objects',    sections.other),
            ('macro variables etc',     sections.user_macros),
            ('printer config',          sections.config_settings), 
            ('display templates',       sections.display_templates),
            ('gcode templates',         sections.config_templates),
            ('useless (command help)',  sections.gcode_commands)
            ] -%}
        
        
        {%- for name, items in category_map if items -%}
            {%- set summary = "<summary style='color:" ~ color_category ~ "; font-weight:bold;'>" ~ name ~ " (" ~ items|length ~ " matches)</summary>" -%}
            {%- set _ = output.append("<details>" ~ summary ~ (items|join) ~ "</details>") -%}
        {%- endfor -%}
        {% set _ = action_respond_info("Found " ~ ns.results|length ~ "matches for '" ~ raw_search|e ~ "':" ~ output|join ) %}
    {%- endif -%}
