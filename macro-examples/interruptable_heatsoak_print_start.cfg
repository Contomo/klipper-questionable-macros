[gcode_macro HEATSOAK]
description: "my heatsoak macro"
gcode:
    # Will recieve all the same parameters handed into print start to use.
    M140 S{params.BED_TEMP}
    # move to center
    MOVE_TO_CENTER Z=5
    # blow hot air
    M106 S255

    # preheat all the tools
    {% for tn in printer.toolchanger.tool_numbers if 'T' ~ tn ~ '_TEMP' in params %}
        M109 T{tn} S130
    {% endfor %}





[delayed_gcode _HEAT_SOAK_UPDATE]
gcode:
    UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0
    PRINT_START TICK=1

[gcode_macro PRINT_START]
variable_soak_settings: {
        'enabled':                 True,     # <- change if dont want
        'min_temp_to_trigger':     65,      # Skip soak for prints with bed temp lower then this
        'min_duration_to_trigger': 30,      # Skip soak for prints shorter than this
        'soak_seconds_per_minute': 5,       # Seconds to soak for each minute of estimated print time.
        'soak_time': {      'min': 5,       # minutes defining upper and lower heat soaking time to clamp to
                            'max': 45,
        },  
    }
variable_state: {}
gcode: 
    {% set BUTS      = { 'stop':    ('[ ⏹ ]',   'error'), 'play':    ('[ ▶ ]',   'success') }  %}
    {% set COLS      = {'choices': ['accent--text text--darken-2', 'accent--text text--lighten-2']} %}
    {% set SELF      = 'PRINT_START' %}
    {% set SS        = soak_settings %}
    {% set th        = printer.toolhead %}
    {% set p_stats   = printer.print_stats %}
    {% set t_idled   = p_stats.total_duration  %}
    {% set t_now     = th.estimated_print_time %}
    {% set remaining = state.get('time_to_soak', 0.0) - t_idled %}

    # ╭───────────────────────────────────────────────── Helpers ─────────────────────────────────────────────────╮
    {%- macro ui(msg)  -%}          { action_respond_info('action:prompt_' ~ msg) }                  {%- endmacro -%}
    {%- macro add(msg) -%}          { ui(msg) } { ui('show') }                                       {%- endmacro -%}
    {%- macro center_but_val(label) -%} 
        { (('＋' ~ label if label > 0 else '−' ~ label|string|replace('-', '')) ~ ' 𝗆𝗂𝗇').center(7, '⠀') }
    {%- endmacro -%}
    {%- macro sign(val) -%}         { val / (val|abs) }                                              {%- endmacro -%}

    {%- macro clamp(val) -%}        
        { [ [ SS.soak_time.min * 60.0, val|float(0) ]|max, SS.soak_time.max * 60.0 ]|min } 
    {%- endmacro -%}

    {%- macro format_time(sec) -%}
        {%- set ns = namespace(remain = sec|int(-1)) -%}                               
        {%- set units, parts = [ ('days', 86400), ('hours', 3600), ('minutes', 60), ('seconds', 1) ], [] -%}
        {%- for label, size in units -%}
            {% set val = ns.remain // size %}
            {%- if val or (size == 1 and not parts) -%}
                {%- set _ = parts.append(val ~ ' ' ~ (label if val > 1 else label.rstrip('s'))) -%}
            {%- endif -%}
            {%- set ns.remain = ns.remain % size -%}
        {%- endfor -%}
        {%- if parts|length > 1 -%}
            {%- set last = parts.pop() -%}
            { parts|join(' ') ~ ' and ' ~ last }
        {%- else -%}
            { parts|first|default('-1s')}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro get_duration_from_name(fname) -%}
        {%- set units   = {'d': 86400, 'h': 3600, 'm': 60, 's': 1} -%}
        {%- set ns      = namespace(best = none, fallback = none) -%}
        {%- set groups  = (fname.rstrip('.gcode')|replace('-', '_')|replace('.', '_')).split('_')|reverse -%}
        {%- for g in groups if ns.best is none and g and g[0].isdigit() -%}
            {%- set parts = (g|replace('d',' d ')|replace('h',' h ')|replace('m',' m ')|replace('s',' s ')|trim).split() -%}
            {%- set ok    = namespace(v = (parts|length is even)) -%}
            {%- if ok.v -%}
                {%- set pairs, seen = parts|batch(2), [] -%} # always pairs -> day/hour...hour/minute...
                {%- set tot   = namespace(sec = 0) -%}
                {%- for p in pairs -%} # for num, u in pairs
                    {%- set num, u = p[0], p[1] -%}
                    {%- if not num.isdigit() or u not in units or u in seen -%}
                        {%- set ok.v = False -%}
                    {%- else -%}
                        {%- set _        = seen.append(u) -%}
                        {%- set tot.sec = tot.sec + (num|int * units[u]) -%}
                    {%- endif -%}
                {%- endfor -%}
            {%- endif -%}
            {%- if ok.v -%}
                {%- if seen|length == 1 and 's' in seen and ns.fallback is none -%}
                    {%- set ns.fallback = tot.sec -%}
                {%- else -%}
                    {%- set ns.best = tot.sec -%}
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
        { ns.best if ns.best is not none else ns.fallback|default(-1) }
    {%- endmacro -%}

    {%- macro polygon_area(poly) -%}
        {%- set n  = poly|length -%}
        {%- set ns = namespace(acc=0) -%}
        {%- for point in poly -%}
            {%- set j        = (loop.index0 + 1) % n -%}
            {%- set x1, y1   = point[0],   point[1] -%}
            {%- set x2, y2   = poly[j][0], poly[j][1] -%}
            {%- set ns.acc   = ns.acc + (x1 * y2 - x2 * y1) -%}
        {%- endfor -%}
        {(ns.acc/2.0)|abs}
    {%- endmacro -%}

    {%- macro max_polygon_area(objs, areas = []) -%}
        {%- for p in objs|map(attribute='polygon') -%} {% set _ = areas.append(polygon_area(p)) %} {% endfor %}
        {areas|map('float')|list|max}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────────────────── Reset and start print ──────────────────────────────────────────╮
    {%- macro _resume_and_print() -%}
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0
        M107 ;
        SAVE_GCODE_STATE NAME=PAUSE_STATE
        RESUME_BASE
        _PRINT_START {state.params|xmlattr}
        # ---< preserve print history
        SET_GCODE_VARIABLE MACRO={SELF} VARIABLE=state VALUE="{{'history': state.get('history', {})}}"
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────────────────────── Open Popup ───────────────────────────────────────────────╮
    {%- macro _show_UI(soak_for) -%}    
        { ui('begin heat soaking for ' ~ p_stats.filename.split('_')[0]|default('next print')) }
        { ui('text upcoming print duration: ' ~ format_time(state.get('print_duration', -1)))}
        { ui('text heat soaking for: ' ~ format_time(soak_for))}
        { ui('text largest part area in this print: ' ~ (max_polygon_area(printer.exclude_object.objects)|float / 100)|int ~ 'cm²')}
        { ui('button_group_start') }
        {% for step in [15, 10, 5, -15, -10, -5] %}
            { ui('button ' ~ center_but_val(step) ~ '|' ~ SELF ~ ' ADJUST=' ~ step ~ '|' ~ COLS.choices[-1 if step > 0 else 0]) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('button_group_start') }
        { ui('button ' ~ BUTS.stop[0] ~ ' Cancel|' ~ SELF ~ ' CANCEL=1|' ~ BUTS.stop[1]) }
        { ui('button ' ~ BUTS.play[0] ~ ' Skip|'   ~ SELF ~ ' SKIP=1|'   ~ BUTS.play[1]) }
        { add('button_group_end') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────────────────────── Update Popup ───────────────────────────────────────────────╮
    {%- macro _tick(seconds_left) -%}
        {%- set s = seconds_left|int -%}
        {%- if s <= 0 -%}
            { ui('end') }
            { _resume_and_print() }
        {%- else -%}
            {%- if s > 300 -%}      # more than 5 min -> update every 5 min
                {% set interval = 300 %}
            {%- elif s > 60 -%}     # 1–5 min -> update every 1 min
                {% set interval = 60  %}
            {%- elif s > 10 -%}     # 10–60 s -> update every 10 s
                {% if not state.get('reminded', False) %} { _show_UI(seconds_left) } {% endif %}
                {% set _ = state.update({'reminded': True}) %}
                SET_GCODE_VARIABLE MACRO={SELF} VARIABLE=state VALUE="{state}"
                {% set interval = 10  %}
            {%- else -%}
                {% set interval = 5   %}
            {%- endif -%}
            UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION={interval}
            { add('text ' ~ format_time(s) ~ ' remaining…') }
        {%- endif -%}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────────────── Two step initialization ─────────────────────────────────────────╮
    {% if 'params' not in state %}
        {% set print_duration = get_duration_from_name(p_stats.filename)|int %}
        {% set time_to_soak   = clamp(SS.soak_seconds_per_minute * (print_duration / 60.0))|float %}
        # ---< save to check later if we even need to.
        {% set new_state = { 'params': params, 'time_to_soak': time_to_soak, 'print_duration': print_duration, 'history': {print_duration: p_stats} } %}
        {% set _ = state.update(new_state) %}
        SET_GCODE_VARIABLE MACRO={SELF} VARIABLE=state VALUE="{state}"
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0.1
        PAUSE_BASE
    {% elif not state.get('initialized', False) %}
        {% set _ = state.update({'initialized': True}) %}
        SET_GCODE_VARIABLE MACRO={SELF} VARIABLE=state VALUE="{state}"
        {% set skip = state.get('print_duration', -1) < SS.min_duration_to_trigger %}
        {% set skip = soak_settings.min_temp_to_trigger > state.params.get('BED_TEMP', -1)|int(-1) or skip %}
        {% set skip = not soak_settings.enabled or skip %}
        {% if skip %} # <-- skip down here, cause we wanna record history to skip soak if two back to back
            { _resume_and_print() }
        {% else %}
            { _show_UI(state.get('time_to_soak', -1)) }
            {'G28' if 'xyz' not in th.homed_axes|lower else ''}
            HEATSOAK {state.params|xmlattr}
        {% endif %}
    {% endif %}
     # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    {% if 'ADJUST' in params %}
        {% set new_duration = clamp(state.get('time_to_soak', 0.0) + params.ADJUST|float(0.0) * 60.0)|float %}
        {% set _ = state.update({'time_to_soak': new_duration}) %}
        {% set _ = state.update({'reminded': False}) %}
        SET_GCODE_VARIABLE MACRO={SELF} VARIABLE=state VALUE="{state}"
        { _show_UI(new_duration) }
        { _tick(new_duration) }
    {% elif 'CANCEL' in params %}
        SET_GCODE_VARIABLE MACRO={SELF} VARIABLE=state VALUE="{{'history': state.get('history', {})}}"
        { ui('end') }
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0
        CANCEL_PRINT
    {% elif 'SKIP' in params %}
        { ui('end') }
        { _resume_and_print() }
    {% elif 'TICK' in params %}
        { _tick(remaining) }
    {% endif %}
